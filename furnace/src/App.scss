html,
body {
  width: 100%;
  height: 100%;
}

.container {
  margin-top: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  position: fixed;
  background-image: url('./asset/images/carbonFiber.png');
  background-size: cover;
  z-index: -10;
}

.container::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-image: radial-gradient(at center bottom, rgba(32, 0, 0, 0.8), rgba(0, 0, 0, 0.8));
  z-index: -1;
}

body::-webkit-scrollbar {
  display: none;
}

.circle-container {
  $particleWidth: 10px;
  $particleNum: 200;
  $particleColor: hsl(30, 100%, 50%);

  position: absolute;
  transform: translateY(-10vh);
  animation-iteration-count: infinite;
  animation-timing-function: linear;

  .circle {
    width: 30%;
    height: 100%;
    border-radius: 50%;
    mix-blend-mode: screen;
    background-image: radial-gradient(
                    hsl(30, 100%, 50%),
                    hsl(30, 100%, 50%) 10%,
                    hsla(30, 100%, 50%, 0) 56%
    );

    animation: fadein-frames 200ms infinite, scale-frames 2s infinite;

    @keyframes fade-frames {
      0% {
        opacity: 1;
      }

      50% {
        opacity: 0.7;
      }

      100% {
        opacity: 1;
      }
    }

    @keyframes scale-frames {
      0% {
        transform: scale3d(0.4, 0.4, 1);
      }

      50% {
        transform: scale3d(2.2, 2.2, 1);
      }

      100% {
        transform: scale3d(0, 0, 1);
      }
    }
  }

  @for $i from 1 through $particleNum {
    &:nth-child(#{$i}) {
      $circleSize: random($particleWidth);
      width: $circleSize + px;
      height: $circleSize + px;

      $startPositionY: random(10) + 100;
      $framesName: "move-frames-" + $i;
      $moveDuration: 7000 + random(4000) + ms;

      animation-name: #{$framesName};
      animation-duration: $moveDuration;
      animation-delay: random(11000) + ms;

      @keyframes #{$framesName} {
        from {
          transform: translate3d(
                          #{random(100) + vw},
                          #{$startPositionY + vh},
                          0
          );
        }

        to {
          transform: translate3d(
                          #{random(100) + vw},
                          #{- $startPositionY - random(30) + vh},
                          0
          );
        }
      }

      .circle {
        animation-delay: random(4000) + ms;
      }
    }
  }
}